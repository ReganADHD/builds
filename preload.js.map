{
  "version": 3,
  "sources": ["../src/utils/debounce.ts", "../src/utils/IpcEvents.ts", "../src/preload.ts", "../src/VencordNative.ts"],
  "sourcesContent": ["/*\n * Vencord, a modification for Discord's desktop app\n * Copyright (c) 2022 Vendicated and contributors\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/**\n * Returns a new function that will call the wrapped function\n * after the specified delay. If the function is called again\n * within the delay, the timer will be reset.\n * @param func The function to wrap\n * @param delay The delay in milliseconds\n */\nexport function debounce<T extends Function>(func: T, delay = 300): T {\n    let timeout: NodeJS.Timeout;\n    return function (...args: any[]) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => { func(...args); }, delay);\n    } as any;\n}\n", "/*\n * Vencord, a modification for Discord's desktop app\n * Copyright (c) 2022 Vendicated and contributors\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\ntype Enum<T extends Record<string, string>> = {\n    [k in keyof T]: T[k];\n} & { [v in keyof T as T[v]]: v; };\n\nfunction strEnum<T extends Record<string, string>>(obj: T): T {\n    const o = {} as T;\n    for (const key in obj) {\n        o[key] = obj[key] as any;\n        o[obj[key]] = key as any;\n    }\n    return Object.freeze(o);\n}\n\nexport default strEnum({\n    QUICK_CSS_UPDATE: \"VencordQuickCssUpdate\",\n    GET_QUICK_CSS: \"VencordGetQuickCss\",\n    SET_QUICK_CSS: \"VencordSetQuickCss\",\n    GET_SETTINGS_DIR: \"VencordGetSettingsDir\",\n    GET_SETTINGS: \"VencordGetSettings\",\n    SET_SETTINGS: \"VencordSetSettings\",\n    OPEN_EXTERNAL: \"VencordOpenExternal\",\n    OPEN_QUICKCSS: \"VencordOpenQuickCss\",\n    GET_UPDATES: \"VencordGetUpdates\",\n    GET_REPO: \"VencordGetRepo\",\n    GET_HASHES: \"VencordGetHashes\",\n    UPDATE: \"VencordUpdate\",\n    BUILD: \"VencordBuild\",\n    GET_DESKTOP_CAPTURE_SOURCES: \"VencordGetDesktopCaptureSources\",\n    OPEN_MONACO_EDITOR: \"VencordOpenMonacoEditor\",\n    DOWNLOAD_VENCORD_CSS: \"VencordDownloadVencordCss\"\n} as const);\n", "/*\n * Vencord, a modification for Discord's desktop app\n * Copyright (c) 2022 Vendicated and contributors\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { debounce } from \"@utils/debounce\";\nimport IpcEvents from \"@utils/IpcEvents\";\nimport electron, { contextBridge, ipcRenderer, webFrame } from \"electron\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nimport VencordNative from \"./VencordNative\";\n\nif (electron.desktopCapturer === void 0) {\n    // Fix for desktopCapturer being main only in Electron 17+\n    // Discord accesses this in discord_desktop_core (DiscordNative.desktopCapture.getDesktopCaptureSources)\n    // and errors with cannot \"read property getSources() of undefined\"\n    // see discord_desktop_core/app/discord_native/renderer/desktopCapture.js\n    const electronPath = require.resolve(\"electron\");\n    delete require.cache[electronPath]!.exports;\n    require.cache[electronPath]!.exports = {\n        ...electron,\n        desktopCapturer: {\n            getSources: opts => ipcRenderer.invoke(IpcEvents.GET_DESKTOP_CAPTURE_SOURCES, opts)\n        }\n    };\n}\n\ncontextBridge.exposeInMainWorld(\"VencordNative\", VencordNative);\n\nif (location.protocol !== \"data:\") {\n    // Discord\n    webFrame.executeJavaScript(readFileSync(join(__dirname, \"renderer.js\"), \"utf-8\"));\n    const rendererCss = join(__dirname, \"renderer.css\");\n\n    function insertCss(css: string) {\n        const style = document.createElement(\"style\");\n        style.id = \"vencord-css-core\";\n        style.textContent = css;\n\n        if (document.readyState === \"complete\") {\n            document.documentElement.appendChild(style);\n        } else {\n            document.addEventListener(\"DOMContentLoaded\", () => document.documentElement.appendChild(style), {\n                once: true\n            });\n        }\n    }\n\n    try {\n        const css = readFileSync(rendererCss, \"utf-8\");\n        insertCss(css);\n    } catch (err) {\n        if ((err as NodeJS.ErrnoException)?.code !== \"ENOENT\")\n            throw err;\n\n        // hack: the pre update updater does not download this file, so manually download it\n        // TODO: remove this in a future version\n        ipcRenderer.invoke(IpcEvents.DOWNLOAD_VENCORD_CSS)\n            .then(insertCss);\n    }\n    require(process.env.DISCORD_PRELOAD!);\n} else {\n    // Monaco Popout\n    contextBridge.exposeInMainWorld(\"setCss\", debounce(s => VencordNative.ipc.invoke(IpcEvents.SET_QUICK_CSS, s)));\n    contextBridge.exposeInMainWorld(\"getCurrentCss\", () => VencordNative.ipc.invoke(IpcEvents.GET_QUICK_CSS));\n    // shrug\n    contextBridge.exposeInMainWorld(\"getTheme\", () => \"vs-dark\");\n}\n", "/*\n * Vencord, a modification for Discord's desktop app\n * Copyright (c) 2022\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport IPC_EVENTS from \"@utils/IpcEvents\";\nimport { IpcRenderer, ipcRenderer } from \"electron\";\n\nfunction assertEventAllowed(event: string) {\n    if (!(event in IPC_EVENTS)) throw new Error(`Event ${event} not allowed.`);\n}\nexport default {\n    getVersions: () => process.versions,\n    ipc: {\n        send(event: string, ...args: any[]) {\n            assertEventAllowed(event);\n            ipcRenderer.send(event, ...args);\n        },\n        sendSync<T = any>(event: string, ...args: any[]): T {\n            assertEventAllowed(event);\n            return ipcRenderer.sendSync(event, ...args);\n        },\n        on(event: string, listener: Parameters<IpcRenderer[\"on\"]>[1]) {\n            assertEventAllowed(event);\n            ipcRenderer.on(event, listener);\n        },\n        off(event: string, listener: Parameters<IpcRenderer[\"off\"]>[1]) {\n            assertEventAllowed(event);\n            ipcRenderer.off(event, listener);\n        },\n        invoke<T = any>(event: string, ...args: any[]): Promise<T> {\n            assertEventAllowed(event);\n            return ipcRenderer.invoke(event, ...args);\n        }\n    }\n};\n"],
  "mappings": "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",
  "names": ["debounce", "func", "delay", "timeout", "args", "strEnum", "obj", "o", "key", "IpcEvents_default", "import_electron", "import_fs", "import_path", "import_electron", "assertEventAllowed", "event", "IpcEvents_default", "VencordNative_default", "args", "listener", "electron", "electronPath", "opts", "IpcEvents_default", "VencordNative_default", "insertCss", "css", "style", "rendererCss", "err", "debounce", "s"]
}
